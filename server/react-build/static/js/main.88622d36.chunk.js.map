{"version":3,"sources":["components/MainView.js","utils/Drawing.js","App.js","reportWebVitals.js","index.js"],"names":["canvas","width","window","innerWidth","height","innerHeight","wsClient","serverAddr","process","SERVER_ADDR","wsEndPoint","SERVER_PORT","WEBSOCKET_ENDPOINT","CLEAR_CANVAS_CMD","JSON","stringify","action","canvasState","Set","mouseDown","init","fetchCanvasState","websockConnStr","console","log","WebSocket","onopen","onmessage","msg","data","parse","clear","undefined","type","add","postCircle","event","rect","getBoundingClientRect","circleState","color","radius","posX","clientX","left","posY","clientY","top","send","draw","ctx","fillStyle","fillRect","Array","from","map","obj","props","beginPath","arc","Math","PI","fill","strokeStyle","stroke","drawCircle","clearCanvas","url","fetch","method","then","res","json","handleCanvasUp","evt","Canvas","canvasRef","useRef","useEffect","a","current","addEventListener","render","getContext","requestId","requestAnimationFrame","cancelAnimationFrame","onClick","ref","onMouseDown","handleCanvasDown","onMouseMove","handleCanvasMove","onMouseUp","onMouseLeave","onChange","hex","App","className","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","CookiesProvider","document","getElementById"],"mappings":"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","file":"static/js/main.88622d36.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { drawCircle, getRandomColor } from \"../utils/Drawing\";\nimport { CompactPicker } from \"react-color\";\n\nlet width = window.innerWidth - 10;\nlet height = window.innerHeight - 60;\n\nlet wsClient = null;\nlet canvas;\n\nconst serverAddr = process.env.SERVER_ADDR || \"letsdrawtogether.net\";\nconst serverPort = process.env.SERVER_PORT || 1234;\nconst wsEndPoint = process.env.WEBSOCKET_ENDPOINT || \"websockettest\";\n\nconst CLEAR_CANVAS_CMD = JSON.stringify({ action: \"CLEAR\" });\n\nlet color = \"black\";\n\nlet canvasState = new Set();\n\nlet mouseDown = false;\n\nconst init = () => {\n  fetchCanvasState();\n\n  const websockConnStr = `wss://${serverAddr}/${wsEndPoint}`;\n  console.log(`Attempting to connect to websocket on: ${websockConnStr}`);\n  wsClient = new WebSocket(websockConnStr);\n\n  wsClient.onopen = () => {\n    console.log(\"WebSocket Client Connected\");\n  };\n\n  wsClient.onmessage = (msg) => {\n    const data = JSON.parse(msg.data);\n\n    if (data?.action === \"CLEAR\") canvasState.clear();\n    if (data?.type !== undefined) canvasState.add(data);\n  };\n};\n\nconst postCircle = (canvas, event) => {\n  const rect = canvas.getBoundingClientRect();\n  const x = event.clientX - rect.left;\n  const y = event.clientY - rect.top;\n  let circleState = {\n    type: \"CIRCLE\",\n    color: color,\n    radius: 2,\n    posX: x,\n    posY: y,\n  };\n  wsClient.send(JSON.stringify(circleState));\n};\n\nconst draw = (ctx) => {\n  ctx.fillStyle = \"white\";\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n  Array.from(canvasState).map((obj) => {\n    drawCircle({\n      ctx,\n      ...obj,\n    });\n  });\n};\n\nconst clearCanvas = () => {\n  wsClient.send(CLEAR_CANVAS_CMD);\n};\n\nconst fetchCanvasState = () => {\n  const url = `https://letsdrawtogether.net/api/canvasState`;\n  console.log(url);\n  fetch(url, {\n    method: \"GET\",\n  })\n    .then((res) => res.json())\n    .then((json) => {\n      console.log(json);\n      canvasState = new Set(json);\n      console.log(canvasState);\n    });\n};\n\nconst handleCanvasDown = (canvas, evt) => {\n  postCircle(canvas, evt);\n  mouseDown = true;\n};\n\nconst handleCanvasMove = (canvas, evt) => {\n  if (mouseDown) postCircle(canvas, evt);\n};\n\nconst handleCanvasUp = (canvas, evt) => {\n  mouseDown = false;\n};\n\nexport const Canvas = () => {\n  const canvasRef = useRef();\n\n  useEffect(async () => {\n    init();\n\n    canvas = canvasRef.current;\n    canvas.addEventListener(\"mousedown\", (event) => postCircle(canvas, event));\n\n    let requestId;\n\n    //render/update method, called on each key frame\n    const render = async () => {\n      const ctx = canvas.getContext(\"2d\");\n      draw(ctx);\n      requestId = requestAnimationFrame(render);\n    };\n\n    await render();\n    return () => {\n      cancelAnimationFrame(requestId);\n    };\n  });\n\n  const changeColor = (color, evt) => {\n    color = color.hex;\n  };\n\n  return (\n    <div>\n      <div>Created By: Rich White - CS5283</div>\n      <button onClick={clearCanvas}>Clear Canvas</button>\n\n      <canvas\n        ref={canvasRef}\n        width={width}\n        height={height}\n        onMouseDown={(evt) => handleCanvasDown(canvas, evt)}\n        onMouseMove={(evt) => handleCanvasMove(canvas, evt)}\n        onMouseUp={(evt) => handleCanvasUp(canvas, evt)}\n        onMouseLeave={(evt) => handleCanvasUp(canvas, evt)}\n      />\n\n      <CompactPicker onChange={changeColor} />\n    </div>\n  );\n};\n","export const drawCircle = (props) => {\n  const { ctx, posX, posY, radius, color } = props;\n\n  ctx.beginPath();\n  ctx.arc(posX, posY, radius, 0, 2 * Math.PI);\n  ctx.fillStyle = color;\n  ctx.fill();\n  ctx.strokeStyle = color;\n  ctx.stroke();\n};\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { Canvas } from \"./components/MainView\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Route exact path=\"/\" component={Canvas} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { CookiesProvider } from \"react-cookie\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <CookiesProvider>\n        <App />\n      </CookiesProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}