{"version":3,"sources":["components/MainView.js","utils/Drawing.js","components/MenuBar.js","App.js","reportWebVitals.js","index.js"],"names":["canvas","serverAddr","process","SERVER_ADDR","wsEndPoint","WEBSOCKET_ENDPOINT","CLEAR_CANVAS_CMD","JSON","stringify","action","width","window","innerWidth","height","innerHeight","color","mouseDown","wsClient","roomId","canvasState","Set","init","fetchCanvasState","websockConnStr","console","log","WebSocket","onopen","onmessage","msg","data","parse","clear","undefined","type","add","postCircle","event","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","topic","radius","posX","posY","send","draw","ctx","fillStyle","fillRect","Array","from","map","obj","props","beginPath","arc","Math","PI","fill","strokeStyle","stroke","drawCircle","clearCanvas","url","fetch","method","then","res","json","handleCanvasUp","evt","Canvas","match","canvasRef","location","useRef","params","resizeCanvas","newWidth","newHeight","addEventListener","useEffect","a","current","render","getContext","requestId","requestAnimationFrame","cancelAnimationFrame","Button","onClick","ref","onMouseDown","handleCanvasDown","onMouseMove","handleCanvasMove","onMouseUp","onMouseLeave","onChange","newColor","hex","MenuBar","AppBar","App","className","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","CookiesProvider","document","getElementById"],"mappings":"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","file":"static/js/main.d690d94e.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { drawCircle, getRandomColor } from \"../utils/Drawing\";\nimport { CompactPicker } from \"react-color\";\nimport { Button } from \"@material-ui/core\";\nimport { useHistory } from \"react-router\";\n\nconst serverAddr = process.env.SERVER_ADDR || \"letsdrawtogether.net\";\nconst wsEndPoint = process.env.WEBSOCKET_ENDPOINT || \"websockettest\";\n\nconst CLEAR_CANVAS_CMD = JSON.stringify({ action: \"CLEAR\" });\n\nlet width = window.innerWidth - 15;\nlet height = window.innerHeight - 160;\nlet color = \"black\";\n\nlet mouseDown = false;\n\nlet wsClient = null;\nlet canvas;\n\nlet roomId = \"\";\n\nlet canvasState = new Set();\n\nconst init = () => {\n  fetchCanvasState();\n\n  const websockConnStr = `wss://${serverAddr}/${wsEndPoint}`;\n  console.log(`Attempting to connect to websocket on: ${websockConnStr}`);\n  wsClient = new WebSocket(websockConnStr);\n\n  wsClient.onopen = () => {\n    console.log(\"WebSocket Client Connected\");\n  };\n\n  wsClient.onmessage = (msg) => {\n    const data = JSON.parse(msg.data);\n\n    if (data?.action === \"CLEAR\") canvasState.clear();\n    if (data?.type !== undefined) canvasState.add(data);\n  };\n};\n\nconst postCircle = (canvas, event) => {\n  const rect = canvas.getBoundingClientRect();\n  const x = event.clientX - rect.left;\n  const y = event.clientY - rect.top;\n  let msg = {\n    topic: roomId,\n    type: \"CIRCLE\",\n    color: color,\n    radius: 2,\n    posX: x,\n    posY: y,\n  };\n  wsClient.send(JSON.stringify(msg));\n};\n\nconst draw = (ctx) => {\n  ctx.fillStyle = \"white\";\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n  Array.from(canvasState).map((obj) => {\n    drawCircle({\n      ctx,\n      ...obj,\n    });\n  });\n};\n\nconst clearCanvas = () => {\n  wsClient.send(CLEAR_CANVAS_CMD);\n};\n\nconst fetchCanvasState = () => {\n  const url = `https://letsdrawtogether.net/api/canvasState?roomId=${roomId}`;\n  console.log(url);\n  fetch(url, {\n    method: \"GET\",\n  })\n    .then((res) => res.json())\n    .then((json) => {\n      console.log(json);\n      canvasState = new Set(json);\n      console.log(canvasState);\n    });\n};\n\nconst handleCanvasDown = (canvas, evt) => {\n  postCircle(canvas, evt);\n  mouseDown = true;\n};\n\nconst handleCanvasMove = (canvas, evt) => {\n  if (mouseDown) postCircle(canvas, evt);\n};\n\nconst handleCanvasUp = (canvas, evt) => {\n  mouseDown = false;\n};\n\nexport const Canvas = ({ match, location }) => {\n  const canvasRef = useRef();\n  roomId = match.params.roomId;\n\n  const resizeCanvas = (canvas, newWidth, newHeight) => {\n    canvas.width = newWidth;\n    canvas.height = newHeight;\n    width = newWidth;\n    height = newHeight;\n  };\n  window.addEventListener(\"resize\", resizeCanvas, false);\n\n  const changeColor = (newColor, evt) => {\n    color = newColor.hex;\n  };\n\n  useEffect(async () => {\n    init(roomId);\n\n    canvas = canvasRef.current;\n    canvas.addEventListener(\"mousedown\", (event) => postCircle(canvas, event));\n\n    let requestId;\n\n    //render/update method, called on each key frame\n    const render = async () => {\n      const width = window.innerWidth - 15;\n      const height = window.innerHeight - 160;\n      resizeCanvas(canvas, width, height);\n\n      const ctx = canvas.getContext(\"2d\");\n      draw(ctx);\n      requestId = requestAnimationFrame(render);\n    };\n\n    await render();\n    return () => {\n      cancelAnimationFrame(requestId);\n    };\n  });\n\n  return (\n    <div>\n      <div>created by Rich White</div>\n      <Button onClick={clearCanvas}>Clear Canvas</Button>\n\n      <canvas\n        ref={canvasRef}\n        width={width}\n        height={height}\n        onMouseDown={(evt) => handleCanvasDown(canvas, evt)}\n        onMouseMove={(evt) => handleCanvasMove(canvas, evt)}\n        onMouseUp={(evt) => handleCanvasUp(canvas, evt)}\n        onMouseLeave={(evt) => handleCanvasUp(canvas, evt)}\n      />\n\n      <CompactPicker onChange={changeColor} />\n    </div>\n  );\n};\n","export const drawCircle = (props) => {\n  const { ctx, posX, posY, radius, color } = props;\n\n  ctx.beginPath();\n  ctx.arc(posX, posY, radius, 0, 2 * Math.PI);\n  ctx.fillStyle = color;\n  ctx.fill();\n  ctx.strokeStyle = color;\n  ctx.stroke();\n};\n","import { AppBar } from \"@material-ui/core\";\n\nexport const MenuBar = () => {\n  return <AppBar>Lets Draw Together! - created by Rich White</AppBar>;\n};\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { Canvas } from \"./components/MainView\";\nimport { MenuBar } from \"./components/MenuBar\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Route exact path=\"/\" component={MenuBar} />\n      <Route exact path=\"/room/:roomId\" component={Canvas} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { CookiesProvider } from \"react-cookie\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <CookiesProvider>\n        <App />\n      </CookiesProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}