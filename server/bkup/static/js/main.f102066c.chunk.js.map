{"version":3,"sources":["components/MainView.js","utils/Drawing.js","components/MenuBar.js","App.js","reportWebVitals.js","index.js"],"names":["canvas","serverAddr","process","SERVER_ADDR","wsEndPoint","WEBSOCKET_ENDPOINT","CLEAR_CANVAS_CMD","JSON","stringify","action","topic","roomId","width","window","innerWidth","height","innerHeight","color","mouseDown","wsClient","canvasState","Set","diffState","clearFlag","prevX","prevY","init","fetchCanvasState","websockConnStr","console","log","WebSocket","onopen","onmessage","msg","data","parse","undefined","type","add","clear","postCircle","event","a","rect","getBoundingClientRect","x","Math","floor","clientX","left","y","clientY","top","radius","posX","posY","send","prevRad","sqrt","pow","slope","negX","negY","i","interpolate","draw","ctx","clearLocalCanvas","Array","from","map","obj","props","beginPath","arc","PI","fillStyle","fill","strokeStyle","stroke","drawCircle","fillRect","clearCanvas","url","fetch","method","then","res","json","handleCanvasDown","evt","handleCanvasMove","handleCanvasUp","Canvas","match","canvasRef","location","useRef","params","addEventListener","newWidth","newHeight","useEffect","current","render","getContext","requestId","requestAnimationFrame","cancelAnimationFrame","Button","onClick","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onChange","newColor","hex","MenuBar","AppBar","App","className","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","CookiesProvider","document","getElementById"],"mappings":"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","file":"static/js/main.f102066c.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { drawCircle, getRandomColor } from \"../utils/Drawing\";\nimport { CompactPicker } from \"react-color\";\nimport { Button } from \"@material-ui/core\";\nimport { useHistory } from \"react-router\";\n\nconst serverAddr = process.env.SERVER_ADDR || \"letsdrawtogether.net\";\nconst wsEndPoint = process.env.WEBSOCKET_ENDPOINT || \"websockettest\";\nlet CLEAR_CANVAS_CMD = JSON.stringify({ action: \"CLEAR\", topic: roomId });\n\nlet width = window.innerWidth - 15;\nlet height = window.innerHeight - 160;\nlet color = \"black\";\n\nlet mouseDown = false;\n\nlet wsClient = null;\nlet canvas;\n\nlet roomId = \"\";\n\nlet bezierCurveSet = new Set();\n\nlet canvasState = new Set();\nlet diffState = new Set();\n\nlet clearFlag = false;\n\nlet prevX = 0;\nlet prevY = 0;\n\nconst init = () => {\n  fetchCanvasState();\n\n  const websockConnStr = `wss://${serverAddr}/${wsEndPoint}`;\n  console.log(`Attempting to connect to websocket on: ${websockConnStr}`);\n  wsClient = new WebSocket(websockConnStr);\n\n  wsClient.onopen = () => {\n    console.log(\"WebSocket Client Connected\");\n  };\n\n  wsClient.onmessage = (msg) => {\n    const data = JSON.parse(msg.data);\n    const msgTopic = data.topic;\n    if (msgTopic !== roomId) return;\n\n    if (data?.type !== undefined) diffState.add(data);\n    else if (data?.action === \"CLEAR\") {\n      canvasState.clear();\n      clearFlag = true;\n      console.log(\"Clear called\");\n    }\n  };\n};\n\nconst postCircle = async (canvas, event) => {\n  const rect = canvas.getBoundingClientRect();\n  const x = Math.floor(event.clientX - rect.left);\n  const y = Math.floor(event.clientY - rect.top);\n  let msg = {\n    topic: roomId,\n    type: \"CIRCLE\",\n    color: color,\n    radius: 2,\n    posX: x,\n    posY: y,\n  };\n  wsClient.send(JSON.stringify(msg));\n\n  if (mouseDown && prevX + prevY > 0) {\n    const prevRad = Math.sqrt(Math.pow(x - prevX, 2) + Math.pow(y - prevY, 2));\n\n    if (prevRad > 4) {\n      const slope = (y - prevY) / (x - prevX);\n\n      const negX = x - prevX < 0 ? -1 : 1;\n      const negY = y - prevY < 0 ? -1 : 1;\n\n      for (let i = 2; i < prevRad; i += 2) {\n        let interpolate = {\n          topic: roomId,\n          type: \"CIRCLE\",\n          color: color,\n          radius: 2,\n          posX: prevX + negX * i,\n          posY: prevY + negY * i * slope,\n        };\n        wsClient.send(JSON.stringify(interpolate));\n      }\n    }\n  }\n\n  prevX = x;\n  prevY = y;\n};\n\nconst draw = (ctx) => {\n  if (clearFlag) {\n    console.log(\"Clear Canvas\");\n    clearLocalCanvas(ctx);\n    clearFlag = false;\n  }\n  // ctx.fillStyle = \"white\";\n  // ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n  Array.from(diffState).map((obj) => {\n    drawCircle({\n      ctx,\n      ...obj,\n    });\n  });\n\n  canvasState = new Set([...canvasState, ...diffState]);\n  diffState = new Set();\n  // Array.from(canvasState).map((obj) => {\n  //   drawCircle({\n  //     ctx,\n  //     ...obj,\n  //   });\n  // });\n};\n\nconst clearLocalCanvas = (ctx) => {\n  console.log(\"Clear Canvas called\");\n  ctx.fillStyle = \"white\";\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n};\n\nconst clearCanvas = () => {\n  wsClient.send(CLEAR_CANVAS_CMD);\n};\n\nconst fetchCanvasState = () => {\n  const url = `https://letsdrawtogether.net/api/canvasState?roomId=${roomId}`;\n  fetch(url, {\n    method: \"GET\",\n  })\n    .then((res) => res.json())\n    .then((json) => {\n      diffState = new Set(json);\n    });\n};\n\nconst handleCanvasDown = async (canvas, evt) => {\n  postCircle(canvas, evt);\n  mouseDown = true;\n};\n\nconst handleCanvasMove = async (canvas, evt) => {\n  if (mouseDown) postCircle(canvas, evt);\n};\n\nconst handleCanvasUp = (canvas, evt) => {\n  mouseDown = false;\n  prevX = 0;\n  prevY = 0;\n};\n\nexport const Canvas = ({ match, location }) => {\n  const canvasRef = useRef();\n  if (match?.params?.roomId !== undefined) roomId = match.params.roomId;\n  CLEAR_CANVAS_CMD = JSON.stringify({ action: \"CLEAR\", topic: roomId });\n\n  const resizeCanvas = (canvas, newWidth, newHeight) => {\n    canvas.width = newWidth;\n    canvas.height = newHeight;\n    width = newWidth;\n    height = newHeight;\n  };\n\n  window.addEventListener(\"resize\", resizeCanvas, false);\n\n  const changeColor = (newColor, evt) => {\n    color = newColor.hex;\n  };\n\n  useEffect(async () => {\n    init(roomId);\n\n    canvas = canvasRef.current;\n    canvas.addEventListener(\"mousedown\", (event) => postCircle(canvas, event));\n\n    let requestId;\n\n    //render/update method, called on each key frame\n    const render = async () => {\n      const width = window.innerWidth - 15;\n      const height = window.innerHeight - 160;\n      // resizeCanvas(canvas, width, height);\n\n      const ctx = canvas.getContext(\"2d\");\n      draw(ctx);\n      requestId = requestAnimationFrame(render);\n    };\n\n    await render();\n    return () => {\n      cancelAnimationFrame(requestId);\n    };\n  });\n\n  return (\n    <div>\n      <div>created by Rich White</div>\n      <Button onClick={clearCanvas}>Clear Canvas</Button>\n\n      <canvas\n        ref={canvasRef}\n        width={width}\n        height={height}\n        onMouseDown={(evt) => handleCanvasDown(canvas, evt)}\n        onMouseMove={(evt) => handleCanvasMove(canvas, evt)}\n        onMouseUp={(evt) => handleCanvasUp(canvas, evt)}\n        onMouseLeave={(evt) => handleCanvasUp(canvas, evt)}\n      />\n\n      <CompactPicker onChange={changeColor} />\n    </div>\n  );\n};\n","export const drawCircle = (props) => {\n  const { ctx, posX, posY, radius, color } = props;\n\n  ctx.beginPath();\n  ctx.arc(posX, posY, radius, 0, 2 * Math.PI);\n  ctx.fillStyle = color;\n  ctx.fill();\n  ctx.strokeStyle = color;\n  ctx.stroke();\n};\n\nexport const drawBezier = (props) =>{\n  const { ctx, posX, posY, radius, color } = props;\n\n  ctx.beginPath();\n  ctx.arc(posX, posY, radius, 0, 2 * Math.PI);\n  ctx.fillStyle = color;\n  ctx.fill();\n  ctx.strokeStyle = color;\n  ctx.stroke();\n}\n","import { AppBar } from \"@material-ui/core\";\n\nexport const MenuBar = () => {\n  return <AppBar>Lets Draw Together! - created by Rich White</AppBar>;\n};\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { Canvas } from \"./components/MainView\";\nimport { MenuBar } from \"./components/MenuBar\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <MenuBar />\n      <Route exact path=\"/\" component={Canvas}/>\n      <Route path=\"/room/:roomId\" component={Canvas} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { CookiesProvider } from \"react-cookie\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <CookiesProvider>\n        <App />\n      </CookiesProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}